#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Senior_FINAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Final_Senior_DB")]
	public partial class DBLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertGamePlayer(GamePlayer instance);
    partial void UpdateGamePlayer(GamePlayer instance);
    partial void DeleteGamePlayer(GamePlayer instance);
    partial void InsertPlayerStrategy(PlayerStrategy instance);
    partial void UpdatePlayerStrategy(PlayerStrategy instance);
    partial void DeletePlayerStrategy(PlayerStrategy instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertStrategy(Strategy instance);
    partial void UpdateStrategy(Strategy instance);
    partial void DeleteStrategy(Strategy instance);
    partial void InsertGameStrategy(GameStrategy instance);
    partial void UpdateGameStrategy(GameStrategy instance);
    partial void DeleteGameStrategy(GameStrategy instance);
    partial void InsertGameFrame(GameFrame instance);
    partial void UpdateGameFrame(GameFrame instance);
    partial void DeleteGameFrame(GameFrame instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    #endregion
		
		public DBLinqDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Final_Senior_DBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GameOutcome> GameOutcomes
		{
			get
			{
				return this.GetTable<GameOutcome>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<GamePlayer> GamePlayers
		{
			get
			{
				return this.GetTable<GamePlayer>();
			}
		}
		
		public System.Data.Linq.Table<PlayerStrategy> PlayerStrategies
		{
			get
			{
				return this.GetTable<PlayerStrategy>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Strategy> Strategies
		{
			get
			{
				return this.GetTable<Strategy>();
			}
		}
		
		public System.Data.Linq.Table<GameStrategy> GameStrategies
		{
			get
			{
				return this.GetTable<GameStrategy>();
			}
		}
		
		public System.Data.Linq.Table<GameFrame> GameFrames
		{
			get
			{
				return this.GetTable<GameFrame>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameOutcomes")]
	public partial class GameOutcome
	{
		
		private int _GameId;
		
		private int _Outcome;
		
		public GameOutcome()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this._GameId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Outcome", DbType="Int NOT NULL")]
		public int Outcome
		{
			get
			{
				return this._Outcome;
			}
			set
			{
				if ((this._Outcome != value))
				{
					this._Outcome = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PiD;
		
		private string _UserName;
		
		private EntitySet<GamePlayer> _GamePlayers;
		
		private EntitySet<PlayerStrategy> _PlayerStrategies;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPiDChanging(int value);
    partial void OnPiDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public Player()
		{
			this._GamePlayers = new EntitySet<GamePlayer>(new Action<GamePlayer>(this.attach_GamePlayers), new Action<GamePlayer>(this.detach_GamePlayers));
			this._PlayerStrategies = new EntitySet<PlayerStrategy>(new Action<PlayerStrategy>(this.attach_PlayerStrategies), new Action<PlayerStrategy>(this.detach_PlayerStrategies));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PiD", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PiD
		{
			get
			{
				return this._PiD;
			}
			set
			{
				if ((this._PiD != value))
				{
					this.OnPiDChanging(value);
					this.SendPropertyChanging();
					this._PiD = value;
					this.SendPropertyChanged("PiD");
					this.OnPiDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_GamePlayer", Storage="_GamePlayers", ThisKey="PiD", OtherKey="PlayerId")]
		public EntitySet<GamePlayer> GamePlayers
		{
			get
			{
				return this._GamePlayers;
			}
			set
			{
				this._GamePlayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerStrategy", Storage="_PlayerStrategies", ThisKey="PiD", OtherKey="PlayerId")]
		public EntitySet<PlayerStrategy> PlayerStrategies
		{
			get
			{
				return this._PlayerStrategies;
			}
			set
			{
				this._PlayerStrategies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Player", Storage="_User", ThisKey="UserName", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._UserName = value.Username;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GamePlayers(GamePlayer entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_GamePlayers(GamePlayer entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_PlayerStrategies(PlayerStrategy entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_PlayerStrategies(PlayerStrategy entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GamePlayers")]
	public partial class GamePlayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameId;
		
		private int _PlayerId;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    #endregion
		
		public GamePlayer()
		{
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_GamePlayer", Storage="_Player", ThisKey="PlayerId", OtherKey="PiD", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.GamePlayers.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.GamePlayers.Add(this);
						this._PlayerId = value.PiD;
					}
					else
					{
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerStrategies")]
	public partial class PlayerStrategy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerId;
		
		private int _StrategyId;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Strategy> _Strategy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnStrategyIdChanging(int value);
    partial void OnStrategyIdChanged();
    #endregion
		
		public PlayerStrategy()
		{
			this._Player = default(EntityRef<Player>);
			this._Strategy = default(EntityRef<Strategy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrategyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StrategyId
		{
			get
			{
				return this._StrategyId;
			}
			set
			{
				if ((this._StrategyId != value))
				{
					if (this._Strategy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStrategyIdChanging(value);
					this.SendPropertyChanging();
					this._StrategyId = value;
					this.SendPropertyChanged("StrategyId");
					this.OnStrategyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerStrategy", Storage="_Player", ThisKey="PlayerId", OtherKey="PiD", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.PlayerStrategies.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.PlayerStrategies.Add(this);
						this._PlayerId = value.PiD;
					}
					else
					{
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Strategy_PlayerStrategy", Storage="_Strategy", ThisKey="StrategyId", OtherKey="StratId", IsForeignKey=true)]
		public Strategy Strategy
		{
			get
			{
				return this._Strategy.Entity;
			}
			set
			{
				Strategy previousValue = this._Strategy.Entity;
				if (((previousValue != value) 
							|| (this._Strategy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Strategy.Entity = null;
						previousValue.PlayerStrategies.Remove(this);
					}
					this._Strategy.Entity = value;
					if ((value != null))
					{
						value.PlayerStrategies.Add(this);
						this._StrategyId = value.StratId;
					}
					else
					{
						this._StrategyId = default(int);
					}
					this.SendPropertyChanged("Strategy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Password;
		
		private string _AdminFlag;
		
		private EntitySet<Player> _Players;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAdminFlagChanging(string value);
    partial void OnAdminFlagChanged();
    #endregion
		
		public User()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminFlag", DbType="NChar(10)")]
		public string AdminFlag
		{
			get
			{
				return this._AdminFlag;
			}
			set
			{
				if ((this._AdminFlag != value))
				{
					this.OnAdminFlagChanging(value);
					this.SendPropertyChanging();
					this._AdminFlag = value;
					this.SendPropertyChanged("AdminFlag");
					this.OnAdminFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Player", Storage="_Players", ThisKey="Username", OtherKey="UserName")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Strategy")]
	public partial class Strategy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StratId;
		
		private string _Description;
		
		private EntitySet<PlayerStrategy> _PlayerStrategies;
		
		private EntitySet<GameStrategy> _GameStrategies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStratIdChanging(int value);
    partial void OnStratIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Strategy()
		{
			this._PlayerStrategies = new EntitySet<PlayerStrategy>(new Action<PlayerStrategy>(this.attach_PlayerStrategies), new Action<PlayerStrategy>(this.detach_PlayerStrategies));
			this._GameStrategies = new EntitySet<GameStrategy>(new Action<GameStrategy>(this.attach_GameStrategies), new Action<GameStrategy>(this.detach_GameStrategies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StratId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StratId
		{
			get
			{
				return this._StratId;
			}
			set
			{
				if ((this._StratId != value))
				{
					this.OnStratIdChanging(value);
					this.SendPropertyChanging();
					this._StratId = value;
					this.SendPropertyChanged("StratId");
					this.OnStratIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(10)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Strategy_PlayerStrategy", Storage="_PlayerStrategies", ThisKey="StratId", OtherKey="StrategyId")]
		public EntitySet<PlayerStrategy> PlayerStrategies
		{
			get
			{
				return this._PlayerStrategies;
			}
			set
			{
				this._PlayerStrategies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Strategy_GameStrategy", Storage="_GameStrategies", ThisKey="StratId", OtherKey="StrategyId")]
		public EntitySet<GameStrategy> GameStrategies
		{
			get
			{
				return this._GameStrategies;
			}
			set
			{
				this._GameStrategies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerStrategies(PlayerStrategy entity)
		{
			this.SendPropertyChanging();
			entity.Strategy = this;
		}
		
		private void detach_PlayerStrategies(PlayerStrategy entity)
		{
			this.SendPropertyChanging();
			entity.Strategy = null;
		}
		
		private void attach_GameStrategies(GameStrategy entity)
		{
			this.SendPropertyChanging();
			entity.Strategy = this;
		}
		
		private void detach_GameStrategies(GameStrategy entity)
		{
			this.SendPropertyChanging();
			entity.Strategy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameStrategies")]
	public partial class GameStrategy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameId;
		
		private int _StrategyId;
		
		private EntityRef<Strategy> _Strategy;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnStrategyIdChanging(int value);
    partial void OnStrategyIdChanged();
    #endregion
		
		public GameStrategy()
		{
			this._Strategy = default(EntityRef<Strategy>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrategyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StrategyId
		{
			get
			{
				return this._StrategyId;
			}
			set
			{
				if ((this._StrategyId != value))
				{
					if (this._Strategy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStrategyIdChanging(value);
					this.SendPropertyChanging();
					this._StrategyId = value;
					this.SendPropertyChanged("StrategyId");
					this.OnStrategyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Strategy_GameStrategy", Storage="_Strategy", ThisKey="StrategyId", OtherKey="StratId", IsForeignKey=true)]
		public Strategy Strategy
		{
			get
			{
				return this._Strategy.Entity;
			}
			set
			{
				Strategy previousValue = this._Strategy.Entity;
				if (((previousValue != value) 
							|| (this._Strategy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Strategy.Entity = null;
						previousValue.GameStrategies.Remove(this);
					}
					this._Strategy.Entity = value;
					if ((value != null))
					{
						value.GameStrategies.Add(this);
						this._StrategyId = value.StratId;
					}
					else
					{
						this._StrategyId = default(int);
					}
					this.SendPropertyChanged("Strategy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_GameStrategy", Storage="_Game", ThisKey="GameId", OtherKey="GiD", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.GameStrategies.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.GameStrategies.Add(this);
						this._GameId = value.GiD;
					}
					else
					{
						this._GameId = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameFrame")]
	public partial class GameFrame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Title;
		
		private int _MinPlayers;
		
		private int _MaxPlayer;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnMinPlayersChanging(int value);
    partial void OnMinPlayersChanged();
    partial void OnMaxPlayerChanging(int value);
    partial void OnMaxPlayerChanged();
    #endregion
		
		public GameFrame()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinPlayers", DbType="Int NOT NULL")]
		public int MinPlayers
		{
			get
			{
				return this._MinPlayers;
			}
			set
			{
				if ((this._MinPlayers != value))
				{
					this.OnMinPlayersChanging(value);
					this.SendPropertyChanging();
					this._MinPlayers = value;
					this.SendPropertyChanged("MinPlayers");
					this.OnMinPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPlayer", DbType="Int NOT NULL")]
		public int MaxPlayer
		{
			get
			{
				return this._MaxPlayer;
			}
			set
			{
				if ((this._MaxPlayer != value))
				{
					this.OnMaxPlayerChanging(value);
					this.SendPropertyChanging();
					this._MaxPlayer = value;
					this.SendPropertyChanged("MaxPlayer");
					this.OnMaxPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameFrame_Game", Storage="_Games", ThisKey="Title", OtherKey="Title")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.GameFrame = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.GameFrame = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GiD;
		
		private string _Title;
		
		private EntitySet<GameStrategy> _GameStrategies;
		
		private EntityRef<GameFrame> _GameFrame;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGiDChanging(int value);
    partial void OnGiDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Game()
		{
			this._GameStrategies = new EntitySet<GameStrategy>(new Action<GameStrategy>(this.attach_GameStrategies), new Action<GameStrategy>(this.detach_GameStrategies));
			this._GameFrame = default(EntityRef<GameFrame>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiD", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GiD
		{
			get
			{
				return this._GiD;
			}
			set
			{
				if ((this._GiD != value))
				{
					this.OnGiDChanging(value);
					this.SendPropertyChanging();
					this._GiD = value;
					this.SendPropertyChanged("GiD");
					this.OnGiDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					if (this._GameFrame.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_GameStrategy", Storage="_GameStrategies", ThisKey="GiD", OtherKey="GameId")]
		public EntitySet<GameStrategy> GameStrategies
		{
			get
			{
				return this._GameStrategies;
			}
			set
			{
				this._GameStrategies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameFrame_Game", Storage="_GameFrame", ThisKey="Title", OtherKey="Title", IsForeignKey=true)]
		public GameFrame GameFrame
		{
			get
			{
				return this._GameFrame.Entity;
			}
			set
			{
				GameFrame previousValue = this._GameFrame.Entity;
				if (((previousValue != value) 
							|| (this._GameFrame.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameFrame.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._GameFrame.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._Title = value.Title;
					}
					else
					{
						this._Title = default(string);
					}
					this.SendPropertyChanged("GameFrame");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameStrategies(GameStrategy entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_GameStrategies(GameStrategy entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
}
#pragma warning restore 1591
