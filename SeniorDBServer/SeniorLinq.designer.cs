#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SeniorDBServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Final_Senior_DB")]
	public partial class SeniorLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertGameFrame(GameFrame instance);
    partial void UpdateGameFrame(GameFrame instance);
    partial void DeleteGameFrame(GameFrame instance);
    partial void InsertGameplayer(Gameplayer instance);
    partial void UpdateGameplayer(Gameplayer instance);
    partial void DeleteGameplayer(Gameplayer instance);
    partial void InsertGFStrategy(GFStrategy instance);
    partial void UpdateGFStrategy(GFStrategy instance);
    partial void DeleteGFStrategy(GFStrategy instance);
    partial void InsertNashPointProfile(NashPointProfile instance);
    partial void UpdateNashPointProfile(NashPointProfile instance);
    partial void DeleteNashPointProfile(NashPointProfile instance);
    partial void InsertNPPayoff(NPPayoff instance);
    partial void UpdateNPPayoff(NPPayoff instance);
    partial void DeleteNPPayoff(NPPayoff instance);
    partial void InsertNPStrategy(NPStrategy instance);
    partial void UpdateNPStrategy(NPStrategy instance);
    partial void DeleteNPStrategy(NPStrategy instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    #endregion
		
		public SeniorLinqDataContext() : 
				base(global::SeniorDBServer.Properties.Settings.Default.Final_Senior_DBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public SeniorLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SeniorLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SeniorLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SeniorLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<GameFrame> GameFrames
		{
			get
			{
				return this.GetTable<GameFrame>();
			}
		}
		
		public System.Data.Linq.Table<Gameplayer> Gameplayers
		{
			get
			{
				return this.GetTable<Gameplayer>();
			}
		}
		
		public System.Data.Linq.Table<GFStrategy> GFStrategies
		{
			get
			{
				return this.GetTable<GFStrategy>();
			}
		}
		
		public System.Data.Linq.Table<NashPointProfile> NashPointProfiles
		{
			get
			{
				return this.GetTable<NashPointProfile>();
			}
		}
		
		public System.Data.Linq.Table<NPPayoff> NPPayoffs
		{
			get
			{
				return this.GetTable<NPPayoff>();
			}
		}
		
		public System.Data.Linq.Table<NPStrategy> NPStrategies
		{
			get
			{
				return this.GetTable<NPStrategy>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Password;
		
		private System.Nullable<char> _AdminFlag;
		
		private string _PasswordSalt;
		
		private EntitySet<Gameplayer> _Gameplayers;
		
		private EntitySet<NPPayoff> _NPPayoffs;
		
		private EntitySet<NPStrategy> _NPStrategies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAdminFlagChanging(System.Nullable<char> value);
    partial void OnAdminFlagChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    #endregion
		
		public User()
		{
			this._Gameplayers = new EntitySet<Gameplayer>(new Action<Gameplayer>(this.attach_Gameplayers), new Action<Gameplayer>(this.detach_Gameplayers));
			this._NPPayoffs = new EntitySet<NPPayoff>(new Action<NPPayoff>(this.attach_NPPayoffs), new Action<NPPayoff>(this.detach_NPPayoffs));
			this._NPStrategies = new EntitySet<NPStrategy>(new Action<NPStrategy>(this.attach_NPStrategies), new Action<NPStrategy>(this.detach_NPStrategies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminFlag", DbType="NChar(1)")]
		public System.Nullable<char> AdminFlag
		{
			get
			{
				return this._AdminFlag;
			}
			set
			{
				if ((this._AdminFlag != value))
				{
					this.OnAdminFlagChanging(value);
					this.SendPropertyChanging();
					this._AdminFlag = value;
					this.SendPropertyChanged("AdminFlag");
					this.OnAdminFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="VarChar(120) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Gameplayer", Storage="_Gameplayers", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Gameplayer> Gameplayers
		{
			get
			{
				return this._Gameplayers;
			}
			set
			{
				this._Gameplayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NPPayoff", Storage="_NPPayoffs", ThisKey="Username", OtherKey="Username")]
		public EntitySet<NPPayoff> NPPayoffs
		{
			get
			{
				return this._NPPayoffs;
			}
			set
			{
				this._NPPayoffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NPStrategy", Storage="_NPStrategies", ThisKey="Username", OtherKey="Username")]
		public EntitySet<NPStrategy> NPStrategies
		{
			get
			{
				return this._NPStrategies;
			}
			set
			{
				this._NPStrategies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gameplayers(Gameplayer entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Gameplayers(Gameplayer entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_NPPayoffs(NPPayoff entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_NPPayoffs(NPPayoff entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_NPStrategies(NPStrategy entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_NPStrategies(NPStrategy entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameFrame")]
	public partial class GameFrame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Title;
		
		private int _MinPlayers;
		
		private int _MaxPlayers;
		
		private int _MinStrategies;
		
		private int _MaxStrategies;
		
		private EntitySet<GFStrategy> _GFStrategies;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnMinPlayersChanging(int value);
    partial void OnMinPlayersChanged();
    partial void OnMaxPlayersChanging(int value);
    partial void OnMaxPlayersChanged();
    partial void OnMinStrategiesChanging(int value);
    partial void OnMinStrategiesChanged();
    partial void OnMaxStrategiesChanging(int value);
    partial void OnMaxStrategiesChanged();
    #endregion
		
		public GameFrame()
		{
			this._GFStrategies = new EntitySet<GFStrategy>(new Action<GFStrategy>(this.attach_GFStrategies), new Action<GFStrategy>(this.detach_GFStrategies));
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinPlayers", DbType="Int NOT NULL")]
		public int MinPlayers
		{
			get
			{
				return this._MinPlayers;
			}
			set
			{
				if ((this._MinPlayers != value))
				{
					this.OnMinPlayersChanging(value);
					this.SendPropertyChanging();
					this._MinPlayers = value;
					this.SendPropertyChanged("MinPlayers");
					this.OnMinPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPlayers", DbType="Int NOT NULL")]
		public int MaxPlayers
		{
			get
			{
				return this._MaxPlayers;
			}
			set
			{
				if ((this._MaxPlayers != value))
				{
					this.OnMaxPlayersChanging(value);
					this.SendPropertyChanging();
					this._MaxPlayers = value;
					this.SendPropertyChanged("MaxPlayers");
					this.OnMaxPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinStrategies", DbType="Int NOT NULL")]
		public int MinStrategies
		{
			get
			{
				return this._MinStrategies;
			}
			set
			{
				if ((this._MinStrategies != value))
				{
					this.OnMinStrategiesChanging(value);
					this.SendPropertyChanging();
					this._MinStrategies = value;
					this.SendPropertyChanged("MinStrategies");
					this.OnMinStrategiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxStrategies", DbType="Int NOT NULL")]
		public int MaxStrategies
		{
			get
			{
				return this._MaxStrategies;
			}
			set
			{
				if ((this._MaxStrategies != value))
				{
					this.OnMaxStrategiesChanging(value);
					this.SendPropertyChanging();
					this._MaxStrategies = value;
					this.SendPropertyChanged("MaxStrategies");
					this.OnMaxStrategiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameFrame_GFStrategy", Storage="_GFStrategies", ThisKey="Title", OtherKey="Title")]
		public EntitySet<GFStrategy> GFStrategies
		{
			get
			{
				return this._GFStrategies;
			}
			set
			{
				this._GFStrategies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameFrame_Game", Storage="_Games", ThisKey="Title", OtherKey="Title")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GFStrategies(GFStrategy entity)
		{
			this.SendPropertyChanging();
			entity.GameFrame = this;
		}
		
		private void detach_GFStrategies(GFStrategy entity)
		{
			this.SendPropertyChanging();
			entity.GameFrame = null;
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.GameFrame = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.GameFrame = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gameplayer")]
	public partial class Gameplayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GID;
		
		private string _Username;
		
		private EntityRef<User> _User;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGIDChanging(int value);
    partial void OnGIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
		
		public Gameplayer()
		{
			this._User = default(EntityRef<User>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GID
		{
			get
			{
				return this._GID;
			}
			set
			{
				if ((this._GID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGIDChanging(value);
					this.SendPropertyChanging();
					this._GID = value;
					this.SendPropertyChanged("GID");
					this.OnGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Gameplayer", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Gameplayers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Gameplayers.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Gameplayer", Storage="_Game", ThisKey="GID", OtherKey="GID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Gameplayers.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Gameplayers.Add(this);
						this._GID = value.GID;
					}
					else
					{
						this._GID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GFStrategy")]
	public partial class GFStrategy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Title;
		
		private int _StrategyId;
		
		private string _Description;
		
		private EntitySet<NPStrategy> _NPStrategies;
		
		private EntityRef<GameFrame> _GameFrame;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnStrategyIdChanging(int value);
    partial void OnStrategyIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public GFStrategy()
		{
			this._NPStrategies = new EntitySet<NPStrategy>(new Action<NPStrategy>(this.attach_NPStrategies), new Action<NPStrategy>(this.detach_NPStrategies));
			this._GameFrame = default(EntityRef<GameFrame>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					if (this._GameFrame.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrategyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StrategyId
		{
			get
			{
				return this._StrategyId;
			}
			set
			{
				if ((this._StrategyId != value))
				{
					this.OnStrategyIdChanging(value);
					this.SendPropertyChanging();
					this._StrategyId = value;
					this.SendPropertyChanged("StrategyId");
					this.OnStrategyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GFStrategy_NPStrategy", Storage="_NPStrategies", ThisKey="StrategyId", OtherKey="StrategyId")]
		public EntitySet<NPStrategy> NPStrategies
		{
			get
			{
				return this._NPStrategies;
			}
			set
			{
				this._NPStrategies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameFrame_GFStrategy", Storage="_GameFrame", ThisKey="Title", OtherKey="Title", IsForeignKey=true)]
		public GameFrame GameFrame
		{
			get
			{
				return this._GameFrame.Entity;
			}
			set
			{
				GameFrame previousValue = this._GameFrame.Entity;
				if (((previousValue != value) 
							|| (this._GameFrame.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameFrame.Entity = null;
						previousValue.GFStrategies.Remove(this);
					}
					this._GameFrame.Entity = value;
					if ((value != null))
					{
						value.GFStrategies.Add(this);
						this._Title = value.Title;
					}
					else
					{
						this._Title = default(string);
					}
					this.SendPropertyChanged("GameFrame");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NPStrategies(NPStrategy entity)
		{
			this.SendPropertyChanging();
			entity.GFStrategy = this;
		}
		
		private void detach_NPStrategies(NPStrategy entity)
		{
			this.SendPropertyChanging();
			entity.GFStrategy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NashPointProfile")]
	public partial class NashPointProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GID;
		
		private int _NPID;
		
		private EntitySet<NPPayoff> _NPPayoffs;
		
		private EntitySet<NPStrategy> _NPStrategies;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGIDChanging(int value);
    partial void OnGIDChanged();
    partial void OnNPIDChanging(int value);
    partial void OnNPIDChanged();
    #endregion
		
		public NashPointProfile()
		{
			this._NPPayoffs = new EntitySet<NPPayoff>(new Action<NPPayoff>(this.attach_NPPayoffs), new Action<NPPayoff>(this.detach_NPPayoffs));
			this._NPStrategies = new EntitySet<NPStrategy>(new Action<NPStrategy>(this.attach_NPStrategies), new Action<NPStrategy>(this.detach_NPStrategies));
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GID", DbType="Int NOT NULL")]
		public int GID
		{
			get
			{
				return this._GID;
			}
			set
			{
				if ((this._GID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGIDChanging(value);
					this.SendPropertyChanging();
					this._GID = value;
					this.SendPropertyChanged("GID");
					this.OnGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NPID
		{
			get
			{
				return this._NPID;
			}
			set
			{
				if ((this._NPID != value))
				{
					this.OnNPIDChanging(value);
					this.SendPropertyChanging();
					this._NPID = value;
					this.SendPropertyChanged("NPID");
					this.OnNPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NashPointProfile_NPPayoff", Storage="_NPPayoffs", ThisKey="NPID", OtherKey="NPID")]
		public EntitySet<NPPayoff> NPPayoffs
		{
			get
			{
				return this._NPPayoffs;
			}
			set
			{
				this._NPPayoffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NashPointProfile_NPStrategy", Storage="_NPStrategies", ThisKey="NPID", OtherKey="NPID")]
		public EntitySet<NPStrategy> NPStrategies
		{
			get
			{
				return this._NPStrategies;
			}
			set
			{
				this._NPStrategies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_NashPointProfile", Storage="_Game", ThisKey="GID", OtherKey="GID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.NashPointProfiles.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.NashPointProfiles.Add(this);
						this._GID = value.GID;
					}
					else
					{
						this._GID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NPPayoffs(NPPayoff entity)
		{
			this.SendPropertyChanging();
			entity.NashPointProfile = this;
		}
		
		private void detach_NPPayoffs(NPPayoff entity)
		{
			this.SendPropertyChanging();
			entity.NashPointProfile = null;
		}
		
		private void attach_NPStrategies(NPStrategy entity)
		{
			this.SendPropertyChanging();
			entity.NashPointProfile = this;
		}
		
		private void detach_NPStrategies(NPStrategy entity)
		{
			this.SendPropertyChanging();
			entity.NashPointProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NPPayoff")]
	public partial class NPPayoff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NPID;
		
		private int _PayoffId;
		
		private string _Username;
		
		private int _Payoff;
		
		private EntityRef<NashPointProfile> _NashPointProfile;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNPIDChanging(int value);
    partial void OnNPIDChanged();
    partial void OnPayoffIdChanging(int value);
    partial void OnPayoffIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPayoffChanging(int value);
    partial void OnPayoffChanged();
    #endregion
		
		public NPPayoff()
		{
			this._NashPointProfile = default(EntityRef<NashPointProfile>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPID", DbType="Int NOT NULL")]
		public int NPID
		{
			get
			{
				return this._NPID;
			}
			set
			{
				if ((this._NPID != value))
				{
					if (this._NashPointProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNPIDChanging(value);
					this.SendPropertyChanging();
					this._NPID = value;
					this.SendPropertyChanged("NPID");
					this.OnNPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayoffId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PayoffId
		{
			get
			{
				return this._PayoffId;
			}
			set
			{
				if ((this._PayoffId != value))
				{
					this.OnPayoffIdChanging(value);
					this.SendPropertyChanging();
					this._PayoffId = value;
					this.SendPropertyChanged("PayoffId");
					this.OnPayoffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payoff", DbType="Int NOT NULL")]
		public int Payoff
		{
			get
			{
				return this._Payoff;
			}
			set
			{
				if ((this._Payoff != value))
				{
					this.OnPayoffChanging(value);
					this.SendPropertyChanging();
					this._Payoff = value;
					this.SendPropertyChanged("Payoff");
					this.OnPayoffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NashPointProfile_NPPayoff", Storage="_NashPointProfile", ThisKey="NPID", OtherKey="NPID", IsForeignKey=true)]
		public NashPointProfile NashPointProfile
		{
			get
			{
				return this._NashPointProfile.Entity;
			}
			set
			{
				NashPointProfile previousValue = this._NashPointProfile.Entity;
				if (((previousValue != value) 
							|| (this._NashPointProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NashPointProfile.Entity = null;
						previousValue.NPPayoffs.Remove(this);
					}
					this._NashPointProfile.Entity = value;
					if ((value != null))
					{
						value.NPPayoffs.Add(this);
						this._NPID = value.NPID;
					}
					else
					{
						this._NPID = default(int);
					}
					this.SendPropertyChanged("NashPointProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NPPayoff", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.NPPayoffs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.NPPayoffs.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NPStrategy")]
	public partial class NPStrategy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NPID;
		
		private string _Username;
		
		private int _StrategyId;
		
		private EntityRef<GFStrategy> _GFStrategy;
		
		private EntityRef<User> _User;
		
		private EntityRef<NashPointProfile> _NashPointProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNPIDChanging(int value);
    partial void OnNPIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnStrategyIdChanging(int value);
    partial void OnStrategyIdChanged();
    #endregion
		
		public NPStrategy()
		{
			this._GFStrategy = default(EntityRef<GFStrategy>);
			this._User = default(EntityRef<User>);
			this._NashPointProfile = default(EntityRef<NashPointProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPID", DbType="Int NOT NULL")]
		public int NPID
		{
			get
			{
				return this._NPID;
			}
			set
			{
				if ((this._NPID != value))
				{
					if (this._NashPointProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNPIDChanging(value);
					this.SendPropertyChanging();
					this._NPID = value;
					this.SendPropertyChanged("NPID");
					this.OnNPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrategyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StrategyId
		{
			get
			{
				return this._StrategyId;
			}
			set
			{
				if ((this._StrategyId != value))
				{
					if (this._GFStrategy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStrategyIdChanging(value);
					this.SendPropertyChanging();
					this._StrategyId = value;
					this.SendPropertyChanged("StrategyId");
					this.OnStrategyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GFStrategy_NPStrategy", Storage="_GFStrategy", ThisKey="StrategyId", OtherKey="StrategyId", IsForeignKey=true)]
		public GFStrategy GFStrategy
		{
			get
			{
				return this._GFStrategy.Entity;
			}
			set
			{
				GFStrategy previousValue = this._GFStrategy.Entity;
				if (((previousValue != value) 
							|| (this._GFStrategy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GFStrategy.Entity = null;
						previousValue.NPStrategies.Remove(this);
					}
					this._GFStrategy.Entity = value;
					if ((value != null))
					{
						value.NPStrategies.Add(this);
						this._StrategyId = value.StrategyId;
					}
					else
					{
						this._StrategyId = default(int);
					}
					this.SendPropertyChanged("GFStrategy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NPStrategy", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.NPStrategies.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.NPStrategies.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NashPointProfile_NPStrategy", Storage="_NashPointProfile", ThisKey="NPID", OtherKey="NPID", IsForeignKey=true)]
		public NashPointProfile NashPointProfile
		{
			get
			{
				return this._NashPointProfile.Entity;
			}
			set
			{
				NashPointProfile previousValue = this._NashPointProfile.Entity;
				if (((previousValue != value) 
							|| (this._NashPointProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NashPointProfile.Entity = null;
						previousValue.NPStrategies.Remove(this);
					}
					this._NashPointProfile.Entity = value;
					if ((value != null))
					{
						value.NPStrategies.Add(this);
						this._NPID = value.NPID;
					}
					else
					{
						this._NPID = default(int);
					}
					this.SendPropertyChanged("NashPointProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GID;
		
		private string _Title;
		
		private System.Nullable<int> _NPlayers;
		
		private EntitySet<Gameplayer> _Gameplayers;
		
		private EntitySet<NashPointProfile> _NashPointProfiles;
		
		private EntityRef<GameFrame> _GameFrame;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGIDChanging(int value);
    partial void OnGIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnNPlayersChanging(System.Nullable<int> value);
    partial void OnNPlayersChanged();
    #endregion
		
		public Game()
		{
			this._Gameplayers = new EntitySet<Gameplayer>(new Action<Gameplayer>(this.attach_Gameplayers), new Action<Gameplayer>(this.detach_Gameplayers));
			this._NashPointProfiles = new EntitySet<NashPointProfile>(new Action<NashPointProfile>(this.attach_NashPointProfiles), new Action<NashPointProfile>(this.detach_NashPointProfiles));
			this._GameFrame = default(EntityRef<GameFrame>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GID
		{
			get
			{
				return this._GID;
			}
			set
			{
				if ((this._GID != value))
				{
					this.OnGIDChanging(value);
					this.SendPropertyChanging();
					this._GID = value;
					this.SendPropertyChanged("GID");
					this.OnGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					if (this._GameFrame.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NPlayers", DbType="Int")]
		public System.Nullable<int> NPlayers
		{
			get
			{
				return this._NPlayers;
			}
			set
			{
				if ((this._NPlayers != value))
				{
					this.OnNPlayersChanging(value);
					this.SendPropertyChanging();
					this._NPlayers = value;
					this.SendPropertyChanged("NPlayers");
					this.OnNPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Gameplayer", Storage="_Gameplayers", ThisKey="GID", OtherKey="GID")]
		public EntitySet<Gameplayer> Gameplayers
		{
			get
			{
				return this._Gameplayers;
			}
			set
			{
				this._Gameplayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_NashPointProfile", Storage="_NashPointProfiles", ThisKey="GID", OtherKey="GID")]
		public EntitySet<NashPointProfile> NashPointProfiles
		{
			get
			{
				return this._NashPointProfiles;
			}
			set
			{
				this._NashPointProfiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameFrame_Game", Storage="_GameFrame", ThisKey="Title", OtherKey="Title", IsForeignKey=true)]
		public GameFrame GameFrame
		{
			get
			{
				return this._GameFrame.Entity;
			}
			set
			{
				GameFrame previousValue = this._GameFrame.Entity;
				if (((previousValue != value) 
							|| (this._GameFrame.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameFrame.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._GameFrame.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._Title = value.Title;
					}
					else
					{
						this._Title = default(string);
					}
					this.SendPropertyChanged("GameFrame");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Gameplayers(Gameplayer entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Gameplayers(Gameplayer entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_NashPointProfiles(NashPointProfile entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_NashPointProfiles(NashPointProfile entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
}
#pragma warning restore 1591
